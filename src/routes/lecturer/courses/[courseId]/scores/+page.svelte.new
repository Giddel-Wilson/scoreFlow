<script lang="ts">
	import type { PageData, ActionData } from './$types';
	import { enhance } from '$app/forms';
	import { BookOpen, Save, Send, AlertCircle, CheckCircle, ArrowLeft, UserPlus } from 'lucide-svelte';

	let { data, form }: { data: PageData; form: ActionData } = $props();

	const course = $derived(data.course);
	const students = $derived(data.students);
	const hasSubmittedScores = $derived(data.hasSubmittedScores);

	let scores: Record<number, string> = $state({});
	let saving = $state(false);
	let submitting = $state(false);
	let showAddModal = $state(false);
	let adding = $state(false);

	// Initialize scores from existing data
	$effect(() => {
		if (students) {
			students.forEach((student: any) => {
				if (student.score && student.score.score !== null) {
					scores[student.id] = student.score.score.toString();
				} else {
					scores[student.id] = '';
				}
			});
		}
	});

	function handleScoreChange(studentId: number, value: string) {
		scores[studentId] = value;
	}

	function validateScore(score: string): boolean {
		const num = parseFloat(score);
		return !isNaN(num) && num >= 0 && num <= 30;
	}

	function getScoresArray() {
		return Object.entries(scores)
			.filter(([_, score]) => score.trim() !== '')
			.map(([studentId, score]) => ({
				studentId: parseInt(studentId),
				score: score
			}));
	}

	function canSubmit() {
		const scoresArray = getScoresArray();
		if (scoresArray.length === 0) return false;
		return scoresArray.every(({ score }) => validateScore(score));
	}
</script>

<svelte:head>
	<title>Enter Scores - {course?.code || 'Loading'} - ScoreFlow</title>
</svelte:head>

<div class="min-h-screen bg-gray-50">
	<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
		<!-- Header -->
		<div class="mb-8">
			<div class="flex items-center mb-4">
				<a 
					href="/lecturer/courses" 
					class="flex items-center text-gray-500 hover:text-gray-700 mr-4"
				>
					<ArrowLeft class="h-5 w-5 mr-1" />
					Back to Courses
				</a>
			</div>
			
			{#if course}
				<div class="flex items-center justify-between">
					<div class="flex items-center">
						<BookOpen class="h-8 w-8 text-blue-600 mr-3" />
						<div>
							<h1 class="text-3xl font-bold text-gray-900">{course.code}</h1>
							<p class="text-gray-600">{course.title}</p>
							<p class="text-sm text-gray-500">
								{course.department.name} • Level {course.level} • Semester {course.semester}
							</p>
						</div>
					</div>
					
					{#if !hasSubmittedScores}
						<button
							onclick={() => showAddModal = true}
							class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center"
						>
							<UserPlus class="h-4 w-4 mr-2" />
							Add Student
						</button>
					{/if}
				</div>

				{#if hasSubmittedScores}
					<div class="mt-4 bg-green-50 border border-green-200 rounded-md p-4">
						<div class="flex">
							<CheckCircle class="h-5 w-5 text-green-400" />
							<div class="ml-3">
								<h3 class="text-sm font-medium text-green-800">
									Scores Submitted
								</h3>
								<p class="mt-1 text-sm text-green-700">
									The scores for this course have been submitted and can no longer be edited.
								</p>
							</div>
						</div>
					</div>
				{/if}
			{:else}
				<div class="animate-pulse">
					<div class="h-8 bg-gray-300 rounded w-1/4 mb-2"></div>
					<div class="h-4 bg-gray-300 rounded w-1/2 mb-1"></div>
					<div class="h-4 bg-gray-300 rounded w-1/3"></div>
				</div>
			{/if}
		</div>

		<!-- Messages -->
		{#if form?.success}
			<div class="mb-6 bg-green-50 border border-green-200 rounded-md p-4">
				<div class="flex">
					<CheckCircle class="h-5 w-5 text-green-400" />
					<div class="ml-3">
						<p class="text-sm font-medium text-green-800">
							{form.message}
						</p>
					</div>
				</div>
			</div>
		{/if}

		{#if form?.error}
			<div class="mb-6 bg-red-50 border border-red-200 rounded-md p-4">
				<div class="flex">
					<AlertCircle class="h-5 w-5 text-red-400" />
					<div class="ml-3">
						<p class="text-sm font-medium text-red-800">
							{form.error}
						</p>
					</div>
				</div>
			</div>
		{/if}

		<!-- Students and Scores -->
		{#if students && students.length > 0}
			<div class="bg-white shadow overflow-hidden sm:rounded-md">
				<div class="px-4 py-5 sm:px-6 border-b border-gray-200">
					<h3 class="text-lg leading-6 font-medium text-gray-900">
						Continuous Assessment Scores
					</h3>
					<p class="mt-1 max-w-2xl text-sm text-gray-500">
						Enter scores for each student (0-30 marks)
					</p>
				</div>

				<div class="overflow-x-auto">
					<table class="min-w-full divide-y divide-gray-200">
						<thead class="bg-gray-50">
							<tr>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Registration Number
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Student Name
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Score (0-30)
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Status
								</th>
							</tr>
						</thead>
						<tbody class="bg-white divide-y divide-gray-200">
							{#each students as student}
								<tr>
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
										{student.regNo}
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
										{student.name}
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
										<input
											type="number"
											min="0"
											max="30"
											step="0.5"
											placeholder="0.0"
											disabled={hasSubmittedScores}
											value={scores[student.id] || ''}
											oninput={(e) => handleScoreChange(student.id, e.currentTarget.value)}
											class="w-20 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm disabled:bg-gray-100 disabled:cursor-not-allowed"
											class:border-red-300={scores[student.id] && !validateScore(scores[student.id])}
										/>
									</td>
									<td class="px-6 py-4 whitespace-nowrap">
										{#if scores[student.id] && validateScore(scores[student.id])}
											<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
												Valid
											</span>
										{:else if scores[student.id] && !validateScore(scores[student.id])}
											<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
												Invalid
											</span>
										{:else}
											<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
												Pending
											</span>
										{/if}
									</td>
								</tr>
							{/each}
						</tbody>
					</table>
				</div>

				{#if !hasSubmittedScores}
					<div class="px-4 py-4 sm:px-6 border-t border-gray-200 bg-gray-50">
						<div class="flex justify-between items-center">
							<div class="text-sm text-gray-500">
								{getScoresArray().length} of {students.length} students have scores entered
							</div>
							<div class="flex space-x-3">
								<form 
									method="POST" 
									action="?/saveScores"
									use:enhance={() => {
										saving = true;
										return async ({ update }) => {
											saving = false;
											await update();
										};
									}}
								>
									<input type="hidden" name="scores" value={JSON.stringify(getScoresArray())} />
									<button
										type="submit"
										disabled={saving || getScoresArray().length === 0}
										class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
									>
										{#if saving}
											<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-400 mr-2"></div>
											Saving...
										{:else}
											<Save class="h-4 w-4 mr-2" />
											Save Draft
										{/if}
									</button>
								</form>

								<form 
									method="POST" 
									action="?/submitScores"
									use:enhance={() => {
										submitting = true;
										return async ({ update }) => {
											submitting = false;
											await update();
										};
									}}
								>
									<button
										type="submit"
										disabled={submitting || !canSubmit()}
										onclick={() => {
											if (!confirm('Are you sure you want to submit these scores? You will not be able to edit them after submission.')) {
												return false;
											}
										}}
										class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
									>
										{#if submitting}
											<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
										{:else}
											<Send class="h-4 w-4 mr-2" />
										{/if}
										Submit Scores
									</button>
								</form>
							</div>
						</div>
					</div>
				{/if}
			</div>
		{:else if students}
			<div class="bg-white shadow rounded-md p-8 text-center">
				<p class="text-gray-500 mb-4">No students found for this course.</p>
				{#if !hasSubmittedScores}
					<button
						onclick={() => showAddModal = true}
						class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
					>
						Add First Student
					</button>
				{/if}
			</div>
		{:else}
			<div class="bg-white shadow rounded-md p-8">
				<div class="animate-pulse">
					<div class="h-4 bg-gray-300 rounded w-1/4 mb-4"></div>
					<div class="h-4 bg-gray-300 rounded w-full mb-2"></div>
					<div class="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
					<div class="h-4 bg-gray-300 rounded w-1/2"></div>
				</div>
			</div>
		{/if}

		<!-- Instructions -->
		<div class="mt-6 bg-blue-50 border border-blue-200 rounded-md p-4">
			<div class="flex">
				<AlertCircle class="h-5 w-5 text-blue-400" />
				<div class="ml-3">
					<h3 class="text-sm font-medium text-blue-800">
						Instructions
					</h3>
					<div class="mt-2 text-sm text-blue-700">
						<ul class="list-disc pl-5 space-y-1">
							<li>Enter scores between 0 and 30 marks for each student</li>
							<li>You can save your progress as a draft and return later</li>
							<li>Once submitted, scores cannot be edited</li>
							<li>Only students registered for this level and department are shown</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Add Student Modal -->
{#if showAddModal}
	<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
		<div class="relative top-20 mx-auto p-5 border w-[500px] shadow-lg rounded-md bg-white">
			<div class="flex justify-between items-center mb-4">
				<h3 class="text-lg font-medium text-gray-900">Add Student</h3>
				<button
					onclick={() => showAddModal = false}
					class="text-gray-400 hover:text-gray-600"
				>
					×
				</button>
			</div>

			<form 
				method="POST" 
				action="?/addStudent"
				use:enhance={() => {
					adding = true;
					return async ({ update }) => {
						adding = false;
						await update();
						if (form?.success) {
							showAddModal = false;
							setTimeout(() => window.location.reload(), 100);
						}
					};
				}}
			>
				<div class="grid grid-cols-1 gap-4 mb-4">
					<div>
						<label for="name" class="block text-sm font-medium text-gray-700">Student Name</label>
						<input
							type="text"
							name="name"
							required
							class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
							placeholder="Full name"
						/>
					</div>
					<div>
						<label for="regNo" class="block text-sm font-medium text-gray-700">Registration Number</label>
						<input
							type="text"
							name="regNo"
							required
							class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
							placeholder="Registration number"
						/>
					</div>
				</div>

				<div class="flex justify-end space-x-3">
					<button
						type="button"
						onclick={() => showAddModal = false}
						disabled={adding}
						class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50"
					>
						Cancel
					</button>
					<button
						type="submit"
						disabled={adding}
						class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
					>
						{#if adding}
							<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
							Adding...
						{:else}
							<UserPlus class="h-4 w-4 mr-2" />
							Add Student
						{/if}
					</button>
				</div>
			</form>
		</div>
	</div>
{/if}
